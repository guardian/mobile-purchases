AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Validates mobile purchases
Parameters:
  Stack:
    Description: Stack name
    Type: String
  App:
    Description: Application name
    Type: String
  Stage:
    Description: Stage name
    Type: String
    AllowedValues:
      - CODE
      - PROD
  DeployBucket:
    Description: Bucket where RiffRaff uploads artifacts on deploy
    Type: String
  HostedZoneId:
    Description: HostedZoneId
    Type: String
  HostedZoneName:
    Description: HostedZoneName
    Type: String
  CertArn:
    Description: ACM Certificate ARN
    Type: String
Resources:
  IosValidateReceiptsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: logs
          PolicyDocument:
            Statement:
              Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: "*"
        - PolicyName: config
          PolicyDocument:
            Statement:
              Action:
                - ssm:GetParametersByPath
              Effect: Allow
              Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${Stage}/${Stack}/${App}
  MobilePuchasesApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Stage
      DefinitionBody:
        swagger: "2.0"
        info:
          version: "1.0.0"
          title: !Ref App
        paths:
          "/validateReceipts":
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IosValidateReceiptsLambda.Arn}/invocations
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                "200":
                  "description": "200 response"
          "/userPurchases":
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IosUserPurchasesLambda.Arn}/invocations
              produces:
              - application/json
              responses:
                "200":
                  "description": "200 response"
          "/healthcheck":
            get:
              responses:
                "200":
                  description: "200 response"
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: |
                    {
                      "statusCode" : 200
                    }
                httpMethod: GET
                responses:
                  default:
                    statusCode: "200"


  ApiDomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      CertificateArn: !Ref CertArn
      DomainName: !Sub ${App}.${HostedZoneName}

  ApiRoute53:
      Type: AWS::Route53::RecordSetGroup
      Properties:
        HostedZoneId: !Ref HostedZoneId
        RecordSets:
          - Name: !Ref ApiDomainName
            Type: A
            AliasTarget:
              HostedZoneId: Z2FDTNDATAQYW2
              DNSName: !GetAtt
                - ApiDomainName
                - DistributionDomainName

  ApiMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !Ref ApiDomainName
      RestApiId: !Ref MobilePuchasesApi
      Stage: !Ref Stage

  IosValidateReceiptsLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: com.gu.mobilepurchases.lambda.ConfiguredValidateReceiptLambda::handleRequest
      Runtime: java8
      CodeUri:
        Bucket: !Ref DeployBucket
        Key: !Sub ${Stack}/${Stage}/${App}-iosvalidatereceipts/${App}-iosvalidatereceipts.jar
      FunctionName: !Sub ${App}-iosvalidatereceipts-${Stage}
      Role: !GetAtt IosValidateReceiptsRole.Arn
      Environment:
        Variables:
          Stage: !Ref Stage
          Stack: !Ref Stack
          App: !Sub ${App}
      Description: Validates purchases
      MemorySize: 256
      Timeout: 60
      Events:
        PostApi:
          Type: Api
          Properties:
            Path: "/validateReceipts"
            Method: POST
            RestApiId: !Ref MobilePuchasesApi

  IosUserPurchasesLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: com.gu.mobilepurchases.userpurchases.lambda.UserPurchasesLambda::handleRequest
      Runtime: java8
      CodeUri:
        Bucket: !Ref DeployBucket
        Key: !Sub ${Stack}/${Stage}/${App}-iosuserpurchases/${App}-iosuserpurchases.jar
      FunctionName: !Sub ${App}-iosuserpurchases-${Stage}
      Role: !GetAtt IosValidateReceiptsRole.Arn
      Environment:
        Variables:
          Stage: !Ref Stage
          Stack: !Ref Stack
          App: !Sub ${App}
      Description: Gets user purchases
      MemorySize: 256
      Timeout: 60
      Events:
        GetApi:
          Type: Api
          Properties:
            Path: "/userPurchases"
            Method: GET
            RestApiId: !Ref MobilePuchasesApi