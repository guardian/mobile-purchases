AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Validates mobile purchases
Parameters:
  Stack:
    Description: Stack name
    Type: String
  App:
    Description: Application name
    Type: String
  Stage:
    Description: Stage name
    Type: String
    AllowedValues:
      - CODE
      - PROD
  DeployBucket:
    Description: Bucket where RiffRaff uploads artifacts on deploy
    Type: String
  HostedZoneId:
    Description: HostedZoneId
    Type: String
  HostedZoneName:
    Description: HostedZoneName
    Type: String
  ApiCertArn:
    Description: ACM Certificate for api use
    Type: String
  AppCertArn:
    Description: ACM Certificate for app use
    Type: String
  AppDNS:
    Description: DNS used by app
    Type: String
  GooglePubSubSecret:
    Type: String
    Description: The secret used by google's pubsub
  ApplePubSubSecret:
    Type: String
    Description: The secret used by google's pubsub
  AlarmTopic:
    Type: String
    Description: The ARN of the SNS topic to send all the cloudwatch alarms to
  SubscriptionExportBucket:
    Type: String
    Description: The name of the export subscription bucket
  UserSubscriptionExportBucket:
    Type: String
    Description: The name of the export user subscription bucket
  SubscriptionEventsExportBucket:
    Type: String
    Description: The name of the export events bucket

Resources:
  MobilePurchasesLambdasRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: logs
          PolicyDocument:
            Statement:
              Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                - cloudwatch:putMetricData
              Resource: "*"
        - PolicyName: config
          PolicyDocument:
            Statement:
              Action:
                - ssm:GetParametersByPath
              Effect: Allow
              Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${App}/${Stage}/${Stack}/*
        - PolicyName: iosuserpurchases-config
          PolicyDocument:
            Statement:
              Action:
                - ssm:GetParametersByPath
              Effect: Allow
              Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${App}-iosuserpurchases/${Stage}/${Stack}
        - PolicyName: iosvalidatereceipts-config
          PolicyDocument:
            Statement:
              Action:
                - ssm:GetParametersByPath
              Effect: Allow
              Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${App}-iosvalidatereceipts/${Stage}/${Stack}
        - PolicyName: googleoauth-config
          PolicyDocument:
            Statement:
              Action:
                - ssm:GetParametersByPath
              Effect: Allow
              Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${App}/${Stage}/google-oauth-lambda
        - PolicyName: google-access-tokens
          PolicyDocument:
            Statement:
              Action:
                - s3:GetObject
                - s3:PutObject
              Effect: Allow
              Resource: !Sub arn:aws:s3:::gu-mobile-access-tokens/${Stage}/google-play-developer-api/*
        - PolicyName: dynamo
          PolicyDocument:
            Statement:
              Effect: Allow
              Action:
                  - "dynamodb:GetItem"
                  - "dynamodb:BatchGetItem"
                  - "dynamodb:BatchWriteItem"
                  - "dynamodb:PutItem"
                  - "dynamodb:UpdateItem"
                  - "dynamodb:Query"
              Resource:
                - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${App}-${Stage}-${Stack}-user-purchases
                - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${App}-${Stage}-subscription-events
                - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${App}-${Stage}-subscription-events-v2
                - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${App}-${Stage}-subscriptions
                - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${App}-${Stage}-user-subscriptions


        - PolicyName: Sqs
          PolicyDocument:
            Statement:
              Effect: Allow
              Action: sqs:*
              Resource:
                - !GetAtt GoogleSubscriptionsQueue.Arn
                - !GetAtt AppleSubscriptionsQueue.Arn
        - PolicyName: Kms
          PolicyDocument:
            Statement:
              Effect: Allow
              Action: [ "kms:GenerateDataKey", "kms:Decrypt" ]
              Resource:
                - !Sub arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/0215d06c-81c4-4896-a5da-c818770ea8db

  LogGroupValidateReceipts:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub /aws/lambda/${App}-iosvalidatereceipts-${Stage}
      RetentionInDays: 7
  LogGroupUserPurchases:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub /aws/lambda/${App}-iosuserpurchases-${Stage}
      RetentionInDays: 7
  MobilePuchasesApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Stage
      MethodSettings: [{
                         "MetricsEnabled": True,
                         "LoggingLevel": "OFF",
                         "ResourcePath": "/*",
                         "HttpMethod": "*"
                       }]
      DefinitionBody:
        swagger: "2.0"
        info:
          version: "1.0.0"
          title: !Sub ${App}-${Stage}
        paths:
          "/validateReceipts":
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IosValidateReceiptsLambda.Arn}/invocations
              consumes: [ application/json ]
              produces: [ application/json ]
              responses:
                "200":
                  "description": "200 response"
          "/userPurchases":
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IosUserPurchasesLambda.Arn}/invocations
              produces: [ application/json ]
              responses:
                "200":
                  "description": "200 response"
          "/google/pubsub":
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GooglePubSubLambda.Arn}/invocations
              consumes: [ application/json ]
              produces: [ application/json ]
              responses:
                "200":
                  "description": "200 response"
          "/google/subscription/{subscriptionId}/status":
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GooglePlaySubStatusLambda.Arn}/invocations
              consumes: [ application/json ]
              produces: [ application/json ]
              responses:
                "200":
                  "description": "200 response"
          "/apple/subscription/status":
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AppleSubStatusLambda.Arn}/invocations
              consumes: [ application/json ]
              produces: [ application/json ]
              responses:
                "200":
                  "description": "200 response"
          "/apple/pubsub":
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ApplePubSubLambda.Arn}/invocations
              consumes: [ application/json ]
              produces: [ application/json ]
              responses:
                "200":
                  "description": "200 response"

          "/apple/linkToSubscriptions":
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AppleLinkUserToSubLambda.Arn}/invocations
              consumes: [ application/json ]
              produces: [ application/json ]
              responses:
                "200":
                  "description": "200 response"

          "/google/linkToSubscriptions":
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GoogleLinkUserToSubLambda.Arn}/invocations
              consumes: [ application/json ]
              produces: [ application/json ]
              responses:
                "200":
                  "description": "200 response"

          "/subscriptions":
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UserSubscriptionsLambda.Arn}/invocations
              consumes: [ application/json ]
              produces: [ application/json ]
              responses:
                "200":
                  "description": "200 response"

          "/healthcheck":
            get:
              responses:
                "200":
                  description: "200 response"
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: |
                    {
                      "statusCode" : 200
                    }
                httpMethod: GET
                responses:
                  default:
                    statusCode: "200"


  ApiDomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      CertificateArn: !Ref ApiCertArn
      DomainName: !Sub ${App}.${HostedZoneName}

  AppDomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      CertificateArn: !Ref AppCertArn
      DomainName: !Ref AppDNS


  ApiRoute53:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref HostedZoneId
      RecordSets:
        - Name: !Ref ApiDomainName
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2
            DNSName: !GetAtt
              - ApiDomainName
              - DistributionDomainName

  ApiMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !Ref ApiDomainName
      RestApiId: !Ref MobilePuchasesApi
      Stage: !Ref Stage

  AppMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !Ref AppDomainName
      RestApiId: !Ref MobilePuchasesApi
      Stage: !Ref Stage

  GoogleOAuthLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: com.gu.mobilepurchases.googleoauth.lambda.GoogleOAuth::handler
      Runtime: java8
      CodeUri:
        Bucket: !Ref DeployBucket
        Key: !Sub ${Stack}/${Stage}/${App}-google-oauth/${App}-google-oauth.jar
      FunctionName: !Sub ${App}-googleoauth-${Stage}
      Role: !GetAtt MobilePurchasesLambdasRole.Arn
      Environment:
        Variables:
          Stage: !Ref Stage
          Stack: !Ref Stack
          App: !Ref App
      Description: Fetches access tokens for the Google Play Developer API
      MemorySize: 512
      Timeout: 45
      Events:
        Schedule:
          Type: Schedule
          Properties:
            Schedule: rate(15 minutes)
      Tags:
        Stage: !Ref Stage
        Stack: !Ref Stack
        App: !Ref App

  GooglePubSubLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: google-pubsub.handler
      Runtime: nodejs10.x
      CodeUri:
        Bucket: !Ref DeployBucket
        Key: !Sub ${Stack}/${Stage}/${App}-google-pubsub/google-pubsub.zip
      FunctionName: !Sub ${App}-googlepubsub-${Stage}
      Role: !GetAtt MobilePurchasesLambdasRole.Arn
      Environment:
        Variables:
          Stage: !Ref Stage
          Stack: !Ref Stack
          App: !Ref App
          Secret: !Ref GooglePubSubSecret
          QueueUrl: !Ref GoogleSubscriptionsQueue
      Description: Records play store events
      MemorySize: 128
      Timeout: 45
      Events:
        PostApi:
          Type: Api
          Properties:
            Path: "/google/pubsub"
            Method: POST
            RestApiId: !Ref MobilePuchasesApi
      Tags:
        Stage: !Ref Stage
        Stack: !Ref Stack
        App: !Ref App

  ApplePubSubLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: apple-pubsub.handler
      Runtime: nodejs10.x
      CodeUri:
        Bucket: !Ref DeployBucket
        Key: !Sub ${Stack}/${Stage}/${App}-apple-pubsub/apple-pubsub.zip
      FunctionName: !Sub ${App}-applepubsub-${Stage}
      Role: !GetAtt MobilePurchasesLambdasRole.Arn
      Environment:
        Variables:
          Stage: !Ref Stage
          Stack: !Ref Stack
          App: !Ref App
          Secret: !Ref ApplePubSubSecret
          QueueUrl: !Ref AppleSubscriptionsQueue
      Description: Records play store events
      MemorySize: 128
      Timeout: 45
      Events:
        PostApi:
          Type: Api
          Properties:
            Path: "/apple/pubsub"
            Method: POST
            RestApiId: !Ref MobilePuchasesApi
      Tags:
        Stage: !Ref Stage
        Stack: !Ref Stack
        App: !Ref App

  GoogleLinkUserToSubLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: google-link-user-subscription.handler
      Runtime: nodejs10.x
      CodeUri:
        Bucket: !Ref DeployBucket
        Key: !Sub ${Stack}/${Stage}/${App}-google-link-user-subscription/google-link-user-subscription.zip
      FunctionName: !Sub ${App}-google-link-user-subscription-${Stage}
      Role: !GetAtt MobilePurchasesLambdasRole.Arn
      Environment:
        Variables:
          Stage: !Ref Stage
          Stack: !Ref Stack
          App: !Ref App
          QueueUrl: !Ref GoogleSubscriptionsQueue
      Description: Links users to subscriptions
      MemorySize: 128
      Timeout: 45
      Events:
        PostApi:
          Type: Api
          Properties:
            Path: "/google/linkToSubscriptions"
            Method: POST
            RestApiId: !Ref MobilePuchasesApi
      Tags:
        Stage: !Ref Stage
        Stack: !Ref Stack
        App: !Ref App

  AppleLinkUserToSubLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: apple-link-user-subscription.handler
      Runtime: nodejs10.x
      CodeUri:
        Bucket: !Ref DeployBucket
        Key: !Sub ${Stack}/${Stage}/${App}-apple-link-user-subscription/apple-link-user-subscription.zip
      FunctionName: !Sub ${App}-apple-link-user-subscription-${Stage}
      Role: !GetAtt MobilePurchasesLambdasRole.Arn
      Environment:
        Variables:
          Stage: !Ref Stage
          Stack: !Ref Stack
          App: !Ref App
          QueueUrl: !Ref AppleSubscriptionsQueue
      Description: Links users to subscriptions
      MemorySize: 128
      Timeout: 45
      Events:
        PostApi:
          Type: Api
          Properties:
            Path: "/apple/linkToSubscriptions"
            Method: POST
            RestApiId: !Ref MobilePuchasesApi
      Tags:
        Stage: !Ref Stage
        Stack: !Ref Stack
        App: !Ref App

  GooglePlaySubStatusLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: google-subscription-status.handler
      Runtime: nodejs10.x
      CodeUri:
        Bucket: !Ref DeployBucket
        Key: !Sub ${Stack}/${Stage}/${App}-google-subscription-status/google-subscription-status.zip
      FunctionName: !Sub ${App}-google-subscription-status-${Stage}
      Role: !GetAtt MobilePurchasesLambdasRole.Arn
      Environment:
        Variables:
          Stage: !Ref Stage
          Stack: !Ref Stack
          App: !Ref App
      Description: Checks the status of a Play Store subscription using the Google Play Developer API
      MemorySize: 128
      Timeout: 45
      Events:
        PostApi:
          Type: Api
          Properties:
            Path: "/google/subscription/{subscriptionId}/status"
            Method: GET
            RestApiId: !Ref MobilePuchasesApi
      Tags:
        Stage: !Ref Stage
        Stack: !Ref Stack
        App: !Ref App

  AppleSubStatusLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: apple-subscription-status.handler
      Runtime: nodejs10.x
      CodeUri:
        Bucket: !Ref DeployBucket
        Key: !Sub ${Stack}/${Stage}/${App}-apple-subscription-status/apple-subscription-status.zip
      FunctionName: !Sub ${App}-apple-subscription-status-${Stage}
      Role: !GetAtt MobilePurchasesLambdasRole.Arn
      Environment:
        Variables:
          Stage: !Ref Stage
          Stack: !Ref Stack
          App: !Ref App
      Description: Checks the status of an Apple App store subscription using the apple API
      MemorySize: 128
      Timeout: 45
      Events:
        PostApi:
          Type: Api
          Properties:
            Path: "/apple/subscription/status"
            Method: POST
            RestApiId: !Ref MobilePuchasesApi
      Tags:
        Stage: !Ref Stage
        Stack: !Ref Stack
        App: !Ref App

  IosValidateReceiptsLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: com.gu.mobilepurchases.lambda.ValidateReceiptLambda::handleRequest
      Runtime: java8
      CodeUri:
        Bucket: !Ref DeployBucket
        Key: !Sub ${Stack}/${Stage}/${App}-ios-validate-receipts/${App}-ios-validate-receipts.jar
      FunctionName: !Sub ${App}-iosvalidatereceipts-${Stage}
      Role: !GetAtt MobilePurchasesLambdasRole.Arn
      Environment:
        Variables:
          Stage: !Ref Stage
          Stack: !Ref Stack
          App: !Ref App
      Description: Validates purchases
      MemorySize: 448
      Timeout: 45
      Events:
        PostApi:
          Type: Api
          Properties:
            Path: "/validateReceipts"
            Method: POST
            RestApiId: !Ref MobilePuchasesApi
      Tags:
        Stage: !Ref Stage
        Stack: !Ref Stack
        App: !Ref App

  IosUserPurchasesLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: com.gu.mobilepurchases.userpurchases.lambda.UserPurchasesLambda::handleRequest
      Runtime: java8
      CodeUri:
        Bucket: !Ref DeployBucket
        Key: !Sub ${Stack}/${Stage}/${App}-ios-user-purchases/${App}-ios-user-purchases.jar
      FunctionName: !Sub ${App}-iosuserpurchases-${Stage}
      Role: !GetAtt MobilePurchasesLambdasRole.Arn
      Environment:
        Variables:
          Stage: !Ref Stage
          Stack: !Ref Stack
          App: !Ref App
      Description: Gets user purchases
      MemorySize: 448
      Timeout: 45
      Events:
        GetApi:
          Type: Api
          Properties:
            Path: "/userPurchases"
            Method: GET
            RestApiId: !Ref MobilePuchasesApi
      Tags:
        Stage: !Ref Stage
        Stack: !Ref Stack
        App: !Ref App

  GoogleSubscriptionsQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${App}-${Stage}-google-subscriptions-to-fetch
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt GoogleSubscriptionsQueueDlq.Arn
        maxReceiveCount: 8
      KmsMasterKeyId: alias/aws/sqs
      Tags:
        - Key: Stage
          Value: !Ref Stage
        - Key: Stack
          Value: !Ref Stack
        - Key: App
          Value: !Ref App

  GoogleSubscriptionsQueueDlq:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${App}-${Stage}-google-subscriptions-to-fetch-dlq
      KmsMasterKeyId: alias/aws/sqs
      Tags:
        - Key: Stage
          Value: !Ref Stage
        - Key: Stack
          Value: !Ref Stack
        - Key: App
          Value: !Ref App

  AppleSubscriptionsQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${App}-${Stage}-apple-subscriptions-to-fetch
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt AppleSubscriptionsQueueDlq.Arn
        maxReceiveCount: 8
      KmsMasterKeyId: alias/aws/sqs
      Tags:
        - Key: Stage
          Value: !Ref Stage
        - Key: Stack
          Value: !Ref Stack
        - Key: App
          Value: !Ref App

  AppleSubscriptionsQueueDlq:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${App}-${Stage}-apple-subscriptions-to-fetch-dlq
      KmsMasterKeyId: alias/aws/sqs
      Tags:
        - Key: Stage
          Value: !Ref Stage
        - Key: Stack
          Value: !Ref Stack
        - Key: App
          Value: !Ref App

  GoogleTokenRefreshFailureAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
        - !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:mobile-server-side
      AlarmName: !Sub mobile-purchases-${Stage}-google-oauth-token-refresh-failure
      AlarmDescription: !Sub Trigger the GoogleOAuth lambda manually to refresh the token
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref GoogleOAuthLambda
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 1
      TreatMissingData: notBreaching

  GooglePlaySubsStatus5xxErrors:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
        - !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:mobile-server-side
      AlarmName: !Sub mobile-purchases-${Stage}-play-subscription-status-check-errors
      AlarmDescription: !Sub A high number errors are being served to the Android app when it is attempting to check Play GoogleSubscription statuses
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: ApiName
          Value: !Sub ${App}-${Stage}
        - Name: Method
          Value: GET
        - Name: Resource
          Value: /google/subscription/{subscriptionId}/status
        - Name: Stage
          Value: !Ref Stage
      EvaluationPeriods: 1
      MetricName: 5XXError
      Namespace: AWS/ApiGateway
      Period: 300
      Statistic: Sum
      Threshold: 10
      TreatMissingData: notBreaching


  UpdateGoogleSubscriptionsLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${App}-google-update-subscriptions-${Stage}
      Code:
        S3Bucket: !Ref DeployBucket
        S3Key: !Sub ${Stack}/${Stage}/${App}-google-update-subscriptions/google-update-subscriptions.zip
      Environment:
        Variables:
          App: !Sub ${App}
          Stack: !Sub ${Stack}
          Stage: !Sub ${Stage}
      Description: Consomes subscription data updates from google playstore from sqs and stores them in dynamo
      Handler: google-update-subscriptions.handler
      MemorySize: 512
      Role: !GetAtt MobilePurchasesLambdasRole.Arn
      Timeout: 25
      Runtime: nodejs10.x


  UpdateGoogleSubscriptionsEventSource:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      FunctionName: !Ref UpdateGoogleSubscriptionsLambda
      Enabled: true
      EventSourceArn: !GetAtt GoogleSubscriptionsQueue.Arn
      BatchSize: 10


  UserSubscriptionsLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: user-subscriptions.handler
      Runtime: nodejs10.x
      CodeUri:
        Bucket: !Ref DeployBucket
        Key: !Sub ${Stack}/${Stage}/${App}-user-subscriptions/user-subscriptions.zip
      FunctionName: !Sub ${App}-user-subscriptions-${Stage}
      Role: !GetAtt MobilePurchasesLambdasRole.Arn
      Environment:
        Variables:
          Stage: !Ref Stage
          Stack: !Ref Stack
          App: !Ref App
      Description: Retrieves subscription details for a given user
      MemorySize: 128
      Timeout: 45
      Events:
        PostApi:
          Type: Api
          Properties:
            Path: "/subscriptions"
            Method: GET
            RestApiId: !Ref MobilePuchasesApi
      Tags:
        Stage: !Ref Stage
        Stack: !Ref Stack
        App: !Ref App

  UpdateAppleSubscriptionsLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${App}-apple-update-subscriptions-${Stage}
      Code:
        S3Bucket: !Ref DeployBucket
        S3Key: !Sub ${Stack}/${Stage}/${App}-apple-update-subscriptions/apple-update-subscriptions.zip
      Environment:
        Variables:
          App: !Sub ${App}
          Stack: !Sub ${Stack}
          Stage: !Sub ${Stage}
      Description: Consomes subscription data updates from app store from sqs and stores them in dynamo
      Handler: apple-update-subscriptions.handler
      MemorySize: 512
      Role: !GetAtt MobilePurchasesLambdasRole.Arn
      Timeout: 25
      Runtime: nodejs10.x

  AppleSubscriptionsEventSource:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      FunctionName: !Ref UpdateAppleSubscriptionsLambda
      Enabled: true
      EventSourceArn: !GetAtt AppleSubscriptionsQueue.Arn
      BatchSize: 10

  AppleSubscriptionDlqDepthAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Ensure that the apple subsciption dead letter queue is empty"
      Namespace: "AWS/SQS"
      MetricName: ApproximateNumberOfMessagesVisible
      Dimensions:
        - Name: QueueName
          Value: !GetAtt 'AppleSubscriptionsQueueDlq.QueueName'
      Period: 3000
      Statistic: Sum
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
        - Ref: AlarmTopic
      TreatMissingData: notBreaching

  GoogleSubscriptionDlqDepthAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Ensure that the apple subsciption dead letter queue is empty"
      Namespace: "AWS/SQS"
      MetricName: ApproximateNumberOfMessagesVisible
      Dimensions:
        - Name: QueueName
          Value: !GetAtt 'GoogleSubscriptionsQueueDlq.QueueName'
      Period: 3000
      Statistic: Sum
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
        - Ref: AlarmTopic
      TreatMissingData: notBreaching

  ExportLambdasRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: logs
          PolicyDocument:
            Statement:
              Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                - cloudwatch:putMetricData
              Resource: "*"
        - PolicyName: dynamo
          PolicyDocument:
            Statement:
              Effect: Allow
              Action:
                - "dynamodb:Scan"
                - "dynamodb:Query"
              Resource:
                - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${App}-${Stage}-subscriptions
                - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${App}-${Stage}-user-subscriptions
                - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${App}-${Stage}-subscription-events-v2/*
        - PolicyName: s3
          PolicyDocument:
            Statement:
              Action:
                - s3:PutObject
                - s3:PutObjectAcl
              Effect: Allow
              Resource:
                - !Sub arn:aws:s3:::${SubscriptionExportBucket}/*
                - !Sub arn:aws:s3:::${UserSubscriptionExportBucket}/*
                - !Sub arn:aws:s3:::${SubscriptionEventsExportBucket}/*

  ExportSubscriptionTableLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: export-subscription-tables.handler
      Runtime: nodejs10.x
      CodeUri:
        Bucket: !Ref DeployBucket
        Key: !Sub ${Stack}/${Stage}/${App}-export-subscription-tables/export-subscription-tables.zip
      FunctionName: !Sub ${App}-export-subscription-table-${Stage}
      Role: !GetAtt ExportLambdasRole.Arn
      Environment:
        Variables:
          App: !Sub ${App}
          Stack: !Sub ${Stack}
          Stage: !Sub ${Stage}
          ExportBucket: !Ref SubscriptionExportBucket
          ClassName: ReadSubscription
      Description: Export subscription table to the datalake
      MemorySize: 512
      Timeout: 900
      Events:
        Schedule:
          Type: Schedule
          Properties:
            Schedule: cron(3 0 1/1 * ? *)
      Tags:
        Stage: !Ref Stage
        Stack: !Ref Stack
        App: !Ref App

  ExportUserSubscriptionTableLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: export-subscription-tables.handler
      Runtime: nodejs10.x
      CodeUri:
        Bucket: !Ref DeployBucket
        Key: !Sub ${Stack}/${Stage}/${App}-export-subscription-tables/export-subscription-tables.zip
      FunctionName: !Sub ${App}-export-user-subscription-table-${Stage}
      Role: !GetAtt ExportLambdasRole.Arn
      Environment:
        Variables:
          App: !Sub ${App}
          Stack: !Sub ${Stack}
          Stage: !Sub ${Stage}
          ExportBucket: !Ref UserSubscriptionExportBucket
          ClassName: ReadUserSubscription
      Description: Export the user subscription table to the datalake
      MemorySize: 512
      Timeout: 900
      Events:
        Schedule:
          Type: Schedule
          Properties:
            Schedule: cron(3 0 1/1 * ? *)
      Tags:
        Stage: !Ref Stage
        Stack: !Ref Stack
        App: !Ref App

  ExportUserSubscriptionEventsTableLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: export-subscription-events-table.handler
      Runtime: nodejs10.x
      CodeUri:
        Bucket: !Ref DeployBucket
        Key: !Sub ${Stack}/${Stage}/${App}-export-subscription-events-table/export-subscription-events-table.zip
      FunctionName: !Sub ${App}-export-subscription-events-table-${Stage}
      Role: !GetAtt ExportLambdasRole.Arn
      Environment:
        Variables:
          App: !Sub ${App}
          Stack: !Sub ${Stack}
          Stage: !Sub ${Stage}
          ExportBucket: !Ref SubscriptionEventsExportBucket
      Description: Export the subscription event table to the datalake
      MemorySize: 512
      Timeout: 900
      Events:
        Schedule:
          Type: Schedule
          Properties:
            Schedule: cron(3 0 1/1 * ? *)
      Tags:
        Stage: !Ref Stage
        Stack: !Ref Stack
        App: !Ref App

  DeleteUserLinkLambdasRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: logs
          PolicyDocument:
            Statement:
              Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                - cloudwatch:putMetricData
              Resource: "*"
        - PolicyName: dynamoStream
          PolicyDocument:
            Statement:
              Effect: Allow
              Action:
                - "dynamodb:GetRecords"
                - "dynamodb:GetShardIterator"
                - "dynamodb:DescribeStream"
                - "dynamodb:ListStreams"
              Resource:
                - Fn::ImportValue:
                    !Sub ${App}-${Stage}-subscriptions-stream-arn
        - PolicyName: dynamo
          PolicyDocument:
            Statement:
              Effect: Allow
              Action:
                - "dynamodb:Query"
                - "dynamodb:DeleteItem"
              Resource:
                - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${App}-${Stage}-user-subscriptions
                - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${App}-${Stage}-user-subscriptions/*

  DeleteUserSubscriptionLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: delete-user-subscription.handler
      Runtime: nodejs10.x
      CodeUri:
        Bucket: !Ref DeployBucket
        Key: !Sub ${Stack}/${Stage}/${App}-delete-user-subscription/delete-user-subscription.zip
      FunctionName: !Sub ${App}-delete-user-subscription-${Stage}
      Role: !GetAtt DeleteUserLinkLambdasRole.Arn
      Environment:
        Variables:
          App: !Sub ${App}
          Stack: !Sub ${Stack}
          Stage: !Sub ${Stage}
      Description: Delete the link to user IDs when the subscription has reached its end of life
      MemorySize: 512
      Timeout: 60
      Events:
        Schedule:
          Type: DynamoDB
          Properties:
            Stream:
              Fn::ImportValue:
                !Sub ${App}-${Stage}-subscriptions-stream-arn
            StartingPosition: LATEST
      Tags:
        Stage: !Ref Stage
        Stack: !Ref Stack
        App: !Ref App